<!DOCTYPE html>
<html lang="sv">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{% if title %}{{ title }} - {% endif %}Jocke p√• internet</title>
  <meta name="description" content="{{ description or 'En blogg om foto, teknik och slumpm√§ssiga tankar' }}">
  <link rel="stylesheet" href="/assets/css/bundle.css">
  <link rel="icon" type="image/svg+xml" href="/assets/favicon/jp-favicon.svg">
</head>
<body>
  <div class="main-container">
    <header class="header">
      <div class="header-top">
        <h1 class="site-title">Jocke p√• internet</h1>
        <button class="theme-toggle" onclick="toggleTheme()" aria-label="V√§xla mellan ljust och m√∂rkt tema">
          <span class="theme-icon">üåô</span>
        </button>
      </div>
      <p class="site-subtitle">En blogg om foto, teknik och slumpm√§ssiga tankar</p>
    </header>

    <nav class="tag-nav">
      <a href="#" class="tag-link tag-filter active" data-tag="all" style="background-color: #64748b;">Alla</a>
      {% for tag in collections.tagList %}
        <a href="#" class="tag-link tag-filter" data-tag="{{ tag }}" style="background-color: {{ tagColors[tag] or '#64748b' }};">{{ tag }}</a>
      {% endfor %}
    </nav>

    <main>
      {{ content | safe }}
    </main>

    <footer class="footer">
      <p><span class="terminal-prompt">jocke@internet:~$</span> uptime: {% datetime %}</p>
    </footer>
  </div>

  <script>
    function toggleTheme() {
      const body = document.body;
      const themeIcon = document.querySelector('.theme-icon');

      if (body.classList.contains('light-mode')) {
        body.classList.remove('light-mode');
        themeIcon.textContent = 'üåô';
        localStorage.setItem('theme', 'dark');
      } else {
        body.classList.add('light-mode');
        themeIcon.textContent = '‚òÄÔ∏è';
        localStorage.setItem('theme', 'light');
      }
    }

    // Load saved theme on page load
    document.addEventListener('DOMContentLoaded', function() {
      const savedTheme = localStorage.getItem('theme');
      const themeIcon = document.querySelector('.theme-icon');

      if (savedTheme === 'light') {
        document.body.classList.add('light-mode');
        themeIcon.textContent = '‚òÄÔ∏è';
      } else {
        themeIcon.textContent = 'üåô';
      }
    });
  </script>

  <script>
  // Client-side multi-tag filtering
  document.addEventListener('DOMContentLoaded', () => {
    const filters = document.querySelectorAll('.tag-filter');
    const posts = document.querySelectorAll('.post-card[data-tags]');
    let activeFilters = ['all'];

    filters.forEach(filter => {
      filter.addEventListener('click', (e) => {
        e.preventDefault();
        const clickedTag = filter.dataset.tag;

        // Handle 'All' button
        if (clickedTag === 'all') {
          activeFilters = ['all'];
        } else {
          // Remove 'all' if another tag is selected
          const allIndex = activeFilters.indexOf('all');
          if (allIndex > -1) {
            activeFilters.splice(allIndex, 1);
          }

          // Add or remove the clicked tag
          const tagIndex = activeFilters.indexOf(clickedTag);
          if (tagIndex > -1) {
            activeFilters.splice(tagIndex, 1);
          } else {
            activeFilters.push(clickedTag);
          }

          // If no filters are left, default back to 'all'
          if (activeFilters.length === 0) {
            activeFilters.push('all');
          }
        }

        updateActiveButtons();
        filterPosts();
      });
    });

    function updateActiveButtons() {
      filters.forEach(filter => {
        const tag = filter.dataset.tag;
        if (activeFilters.includes(tag)) {
          filter.classList.add('active');
        } else {
          filter.classList.remove('active');
        }
      });
    }

    function filterPosts() {
      posts.forEach(post => {
        const postTags = post.dataset.tags.split(',');

        if (activeFilters.includes('all')) {
          post.style.display = '';
          return;
        }

        const isVisible = activeFilters.some(filter => postTags.includes(filter));
        post.style.display = isVisible ? '' : 'none';
      });
    }
  });
  </script>
</body>
</html>
